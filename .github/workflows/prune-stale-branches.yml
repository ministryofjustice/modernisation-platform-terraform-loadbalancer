name: Cleanup of Stale Branches (Deletes if branch and commits are 2+ months old)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
  cleanup:
    name: Cleanup Stale Branches
    runs-on: ubuntu-latest

    steps:
      - name: Ensure CLI tools are installed
        run: |
          command -v gh >/dev/null || (echo "‚ùå GitHub CLI (gh) is not installed" && exit 1)
          command -v jq >/dev/null || (echo "‚ùå jq is not installed" && exit 1)

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup GitHub CLI
        run: |
          gh auth setup-git
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch branches protected from deletion
        id: protected
        run: |
          echo "Fetching branches with 'deletion protection' enabled..."
          > protected-branches.txt

          branches=$(gh api repos/${{ github.repository }}/branches --jq '.[].name')

          for branch in $branches; do
            protection=$(gh api repos/${{ github.repository }}/branches/$branch/protection --silent 2>/dev/null || true)
            allow_delete=$(echo "$protection" | jq -r '.allow_deletions.enabled // "true"')

            if [[ "$allow_delete" == "false" ]]; then
              echo "$branch" >> protected-branches.txt
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete stale branches (no commits in last 2 months)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eo pipefail
          trap '' PIPE
          git fetch --all --prune --tags

          mapfile -t protected < protected-branches.txt
          protected_branches="${protected[*]}"

          echo "Branches protected from deletion: ${protected_branches[@]}"
          echo ""

          echo "| Branch | Status | Reason |"
          echo "|--------|--------|--------|"

          branches=$(git for-each-ref --format='%(refname:short)' refs/remotes/origin/)

          for raw_branch in $branches; do
            branch=$(echo "$raw_branch" | sed 's|^origin/||' | xargs)

            if [[ -z "$branch" || "$branch" == "origin" ]]; then
              continue
            fi

            reason=""
            status="‚è∏Ô∏è Skipped"

            echo ""
            echo "üîç Checking branch: $branch"

            last_commit_date=$(git log -1 --format=%aD origin/$branch || echo "Unknown")
            last_commit_timestamp=$(date -d "$last_commit_date" +%s 2>/dev/null || echo 0)
            two_months_ago_timestamp=$(date -d "2 months ago" +%s)

            echo "  ‚û§ Last commit date: $last_commit_date"

            if [[ "$branch" == "main" ]]; then
              reason="Main branch"
            elif echo "${protected_branches[@]}" | grep -qw "$branch"; then
              reason="Deletion protection enabled"
            elif git show-ref --verify --quiet "refs/tags/do-not-prune/$branch"; then
              reason="Tagged do-not-prune"
            elif [[ $last_commit_timestamp -lt $two_months_ago_timestamp ]]; then
              merge_base=$(git merge-base origin/main origin/$branch || true)
              first_unique_commit=$(git log origin/$branch --reverse --pretty=format:"%H" --not $merge_base | head -1)

              if [ -n "$first_unique_commit" ]; then
                branch_creation_date=$(git show -s --format=%aD $first_unique_commit)
                branch_creation_timestamp=$(date -d "$branch_creation_date" +%s)
                echo "  ‚û§ Branch creation date: $branch_creation_date"
              fi

              reason="Deleted (no commits in 2+ months)"
              status="üî• Deleted"
              echo "üóëÔ∏è Deleting branch: $branch"
              if ! gh api -X DELETE repos/${{ github.repository }}/git/refs/heads/$branch; then
                echo "‚ö†Ô∏è WARNING: GitHub refused to delete branch '$branch'. It may be protected."
                status="‚ö†Ô∏è Failed"
                reason="GitHub API deletion failed (possible protection)"
              fi
            else
              reason="Active (recent commits)"
            fi

            printf "| \`%s\` | %s | %s |\n" "$branch" "$status" "$reason"
          done
